
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004ca  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb9  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000950  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004db  00000000  00000000  00001b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cc  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025f  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	95 c0       	rjmp	.+298    	; 0x130 <__vector_1>
   6:	00 00       	nop
   8:	a7 c0       	rjmp	.+334    	; 0x158 <__vector_2>
   a:	00 00       	nop
   c:	b9 c0       	rjmp	.+370    	; 0x180 <__vector_3>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e7 00       	.word	0x00e7	; ????
  8e:	f0 00       	.word	0x00f0	; ????
  90:	f9 00       	.word	0x00f9	; ????
  92:	02 01       	movw	r0, r4
  94:	0b 01       	movw	r0, r22
  96:	14 01       	movw	r2, r8
  98:	1d 01       	movw	r2, r26
  9a:	26 01       	movw	r4, r12

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e1       	ldi	r29, 0x10	; 16
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ea ec       	ldi	r30, 0xCA	; 202
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	aa e0       	ldi	r26, 0x0A	; 10
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a3 31       	cpi	r26, 0x13	; 19
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	6a d1       	rcall	.+724    	; 0x3a8 <main>
  d4:	f8 c1       	rjmp	.+1008   	; 0x4c6 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <serial_init>:
#include <util/delay.h>


void serial_init(unsigned long baud){
	unsigned short ubrr;
	ubrr = (unsigned short) (F_CPU/(16*baud)-1);
  d8:	dc 01       	movw	r26, r24
  da:	cb 01       	movw	r24, r22
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	aa 1f       	adc	r26, r26
  e2:	bb 1f       	adc	r27, r27
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	aa 1f       	adc	r26, r26
  ea:	bb 1f       	adc	r27, r27
  ec:	9c 01       	movw	r18, r24
  ee:	ad 01       	movw	r20, r26
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	44 1f       	adc	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	44 1f       	adc	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e8       	ldi	r23, 0x80	; 128
 104:	80 e7       	ldi	r24, 0x70	; 112
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 d1       	rcall	.+800    	; 0x42a <__udivmodsi4>
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);	//상위보레이트
 10e:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)(ubrr & 0xff);	//하위보레이트
 112:	29 b9       	out	0x09, r18	; 9
	UCSR0B = 0x18;// RX TX 허용
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;// 비동기모드, 정지비트1bit, 문자크기8bit ,패리티x
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 11e:	08 95       	ret

00000120 <tx_data>:
}
void tx_data(unsigned char data)
{
	while((UCSR0A & 0X20) == 0X00); // 전송 준비가 될 때 까지 대기 데이터
 120:	5d 9b       	sbis	0x0b, 5	; 11
 122:	fe cf       	rjmp	.-4      	; 0x120 <tx_data>
	UDR0 = data;					// 시리얼 포트를 통해 데이터 전송
 124:	8c b9       	out	0x0c, r24	; 12
 126:	08 95       	ret

00000128 <rx_data>:
}

unsigned char rx_data(void)
{
	while((UCSR0A & 0X80) == 0X00); // 데이터가 다 들어 올떄 까지 대기 데이터
 128:	5f 9b       	sbis	0x0b, 7	; 11
 12a:	fe cf       	rjmp	.-4      	; 0x128 <rx_data>
	return UDR0;				// 시리얼 포트를 통해 데이터 받음
 12c:	8c b1       	in	r24, 0x0c	; 12
}
 12e:	08 95       	ret

00000130 <__vector_1>:
void FND_SEGMENT(void); 
void LED(void);
void serial(void);

ISR(INT0_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	flag=1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <flag+0x1>
 146:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag>
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_2>:
ISR(INT1_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	flag=2;	
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <flag+0x1>
 16e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag>
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_3>:
ISR(INT2_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
	flag=3;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <flag+0x1>
 196:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <flag>
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <LED>:
		
	}
}

void LED(void){
	ch= rx_data();
 1a8:	bf df       	rcall	.-130    	; 0x128 <rx_data>
 1aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	tx_data(ch);
 1ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1b2:	b6 df       	rcall	.-148    	; 0x120 <tx_data>
	//ch=ch-'/';
	switch(ch){
 1b4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1b8:	8e 2f       	mov	r24, r30
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	f0 97       	sbiw	r30, 0x30	; 48
 1c0:	e8 30       	cpi	r30, 0x08	; 8
 1c2:	f1 05       	cpc	r31, r1
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <LED+0x20>
 1c6:	4a c0       	rjmp	.+148    	; 0x25c <LED+0xb4>
 1c8:	ea 5b       	subi	r30, 0xBA	; 186
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	50 c1       	rjmp	.+672    	; 0x46e <__tablejump2__>
		case '0':{PORTA=~0x00;led=~0x00;break;}
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 1da:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 1de:	08 95       	ret
		case '1':{PORTA=~0x01;led=~0x01;break;}
 1e0:	8e ef       	ldi	r24, 0xFE	; 254
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	8e ef       	ldi	r24, 0xFE	; 254
 1e6:	9f ef       	ldi	r25, 0xFF	; 255
 1e8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 1ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 1f0:	08 95       	ret
		case '2':{PORTA=~0x02;led=~0x02;break;}
 1f2:	8d ef       	ldi	r24, 0xFD	; 253
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	8d ef       	ldi	r24, 0xFD	; 253
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
 1fa:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 1fe:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 202:	08 95       	ret
		case '3':{PORTA=~0x04;led=~0x04;break;}
 204:	8b ef       	ldi	r24, 0xFB	; 251
 206:	8b bb       	out	0x1b, r24	; 27
 208:	8b ef       	ldi	r24, 0xFB	; 251
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 210:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 214:	08 95       	ret
		case '4':{PORTA=~0x08;led=~0x08;break;}
 216:	87 ef       	ldi	r24, 0xF7	; 247
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	87 ef       	ldi	r24, 0xF7	; 247
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 222:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 226:	08 95       	ret
		case '5':{PORTA=~0x10;led=~0x10;break;}
 228:	8f ee       	ldi	r24, 0xEF	; 239
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	8f ee       	ldi	r24, 0xEF	; 239
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 234:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 238:	08 95       	ret
		case '6':{PORTA=~0x20;led=~0x20;break;}
 23a:	8f ed       	ldi	r24, 0xDF	; 223
 23c:	8b bb       	out	0x1b, r24	; 27
 23e:	8f ed       	ldi	r24, 0xDF	; 223
 240:	9f ef       	ldi	r25, 0xFF	; 255
 242:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 246:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 24a:	08 95       	ret
		case '7':{PORTA=~0x40;led=~0x40;break;}
 24c:	8f eb       	ldi	r24, 0xBF	; 191
 24e:	8b bb       	out	0x1b, r24	; 27
 250:	8f eb       	ldi	r24, 0xBF	; 191
 252:	9f ef       	ldi	r25, 0xFF	; 255
 254:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led+0x1>
 258:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led>
 25c:	08 95       	ret

0000025e <FND_SEGMENT>:
	}
	
}
void FND_SEGMENT(void){
	
	while((ADCSRA&0x01)==0x00); //반환종료를 기다림
 25e:	30 9b       	sbis	0x06, 0	; 6
 260:	fe cf       	rjmp	.-4      	; 0x25e <FND_SEGMENT>
	adc_value=(ADC>>2);
 262:	84 b1       	in	r24, 0x04	; 4
 264:	95 b1       	in	r25, 0x05	; 5
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <adc_value+0x1>
 272:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <adc_value>
	for(int j=0;j<100;j++){
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	65 c0       	rjmp	.+202    	; 0x346 <FND_SEGMENT+0xe8>
		
		PORTD=0X20;
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	82 bb       	out	0x12, r24	; 18
		temp=(adc_value%100)/10;
 280:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <adc_value>
 284:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <adc_value+0x1>
 288:	9f 01       	movw	r18, r30
 28a:	36 95       	lsr	r19
 28c:	27 95       	ror	r18
 28e:	36 95       	lsr	r19
 290:	27 95       	ror	r18
 292:	ab e7       	ldi	r26, 0x7B	; 123
 294:	b4 e1       	ldi	r27, 0x14	; 20
 296:	f4 d0       	rcall	.+488    	; 0x480 <__umulhisi3>
 298:	9c 01       	movw	r18, r24
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	64 e6       	ldi	r22, 0x64	; 100
 2a0:	62 9f       	mul	r22, r18
 2a2:	c0 01       	movw	r24, r0
 2a4:	63 9f       	mul	r22, r19
 2a6:	90 0d       	add	r25, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	9f 01       	movw	r18, r30
 2ac:	28 1b       	sub	r18, r24
 2ae:	39 0b       	sbc	r19, r25
 2b0:	ad ec       	ldi	r26, 0xCD	; 205
 2b2:	bc ec       	ldi	r27, 0xCC	; 204
 2b4:	e5 d0       	rcall	.+458    	; 0x480 <__umulhisi3>
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <temp+0x1>
 2c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <temp>
		PORTC=~FND[temp];
 2ca:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <temp>
 2ce:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <temp+0x1>
 2d2:	e0 50       	subi	r30, 0x00	; 0
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 81       	ld	r24, Z
 2d8:	80 95       	com	r24
 2da:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	89 e9       	ldi	r24, 0x99	; 153
 2de:	93 e0       	ldi	r25, 0x03	; 3
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <FND_SEGMENT+0x82>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <FND_SEGMENT+0x88>
		_delay_us(500);
		PORTD=0x10;
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	82 bb       	out	0x12, r24	; 18
		temp=(adc_value%10)/1;
 2ea:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <adc_value>
 2ee:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <adc_value+0x1>
 2f2:	9f 01       	movw	r18, r30
 2f4:	c5 d0       	rcall	.+394    	; 0x480 <__umulhisi3>
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	9c 01       	movw	r18, r24
 304:	22 0f       	add	r18, r18
 306:	33 1f       	adc	r19, r19
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	82 0f       	add	r24, r18
 316:	93 1f       	adc	r25, r19
 318:	9f 01       	movw	r18, r30
 31a:	28 1b       	sub	r18, r24
 31c:	39 0b       	sbc	r19, r25
 31e:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <temp+0x1>
 322:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <temp>
		PORTC=~FND[temp];
 326:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <temp>
 32a:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <temp+0x1>
 32e:	e0 50       	subi	r30, 0x00	; 0
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	80 81       	ld	r24, Z
 334:	80 95       	com	r24
 336:	85 bb       	out	0x15, r24	; 21
 338:	89 e9       	ldi	r24, 0x99	; 153
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <FND_SEGMENT+0xde>
 340:	00 c0       	rjmp	.+0      	; 0x342 <FND_SEGMENT+0xe4>
}
void FND_SEGMENT(void){
	
	while((ADCSRA&0x01)==0x00); //반환종료를 기다림
	adc_value=(ADC>>2);
	for(int j=0;j<100;j++){
 342:	4f 5f       	subi	r20, 0xFF	; 255
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	44 36       	cpi	r20, 0x64	; 100
 348:	51 05       	cpc	r21, r1
 34a:	0c f4       	brge	.+2      	; 0x34e <FND_SEGMENT+0xf0>
 34c:	97 cf       	rjmp	.-210    	; 0x27c <FND_SEGMENT+0x1e>
		PORTD=0x10;
		temp=(adc_value%10)/1;
		PORTC=~FND[temp];
		_delay_us(500);
	}
}
 34e:	08 95       	ret

00000350 <serial>:

void serial(void){	
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
	int ADC_VALUE;
	ADC_VALUE=ADC>>2;	                              // 송신하기 위해서 아스키코드로 문자화
 358:	c4 b1       	in	r28, 0x04	; 4
 35a:	d5 b1       	in	r29, 0x05	; 5
 35c:	d6 95       	lsr	r29
 35e:	c7 95       	ror	r28
 360:	d6 95       	lsr	r29
 362:	c7 95       	ror	r28
	tx_data((ADC_VALUE%100)/10+'0');
 364:	ce 01       	movw	r24, r28
 366:	64 e6       	ldi	r22, 0x64	; 100
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	4c d0       	rcall	.+152    	; 0x404 <__divmodhi4>
 36c:	0a e0       	ldi	r16, 0x0A	; 10
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	b8 01       	movw	r22, r16
 372:	48 d0       	rcall	.+144    	; 0x404 <__divmodhi4>
 374:	80 e3       	ldi	r24, 0x30	; 48
 376:	86 0f       	add	r24, r22
 378:	d3 de       	rcall	.-602    	; 0x120 <tx_data>
	tx_data((ADC_VALUE%10)+'0');
 37a:	ce 01       	movw	r24, r28
 37c:	b8 01       	movw	r22, r16
 37e:	42 d0       	rcall	.+132    	; 0x404 <__divmodhi4>
 380:	80 5d       	subi	r24, 0xD0	; 208
 382:	ce de       	rcall	.-612    	; 0x120 <tx_data>
	tx_data(0x0d);
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	cc de       	rcall	.-616    	; 0x120 <tx_data>
 388:	8a e0       	ldi	r24, 0x0A	; 10
	tx_data('\n');
 38a:	ca de       	rcall	.-620    	; 0x120 <tx_data>
 38c:	2f ef       	ldi	r18, 0xFF	; 255
 38e:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	9b e0       	ldi	r25, 0x0B	; 11
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <serial+0x42>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <serial+0x4c>
 39c:	00 00       	nop
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
	_delay_ms(500);
}
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <main>:
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	8a bb       	out	0x1a, r24	; 26
int main(void)
{
	
	
	DDRA=0xff;       // A 출력(LED)
	DDRC=0xff;        // C 출력(FND)
 3ac:	84 bb       	out	0x14, r24	; 20
	DDRD=0x30;		  // D포트 0,1,2,3 입력(스위치), 4,5 출력(FND 동적구동)
 3ae:	90 e3       	ldi	r25, 0x30	; 48
 3b0:	91 bb       	out	0x11, r25	; 17
	EICRA=0xaa;       // 인터럽트 제어 레지스터, 하강 모서리
 3b2:	9a ea       	ldi	r25, 0xAA	; 170
 3b4:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK=0x0f;       // 외부 인터럽트 0,1,2,3 사용
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	99 bf       	out	0x39, r25	; 57
	
	ADCSRA=0xe7; //adc 가능, adc변환시작,free running mode,인터럽트금지,변환속도1/128
 3bc:	97 ee       	ldi	r25, 0xE7	; 231
 3be:	96 b9       	out	0x06, r25	; 6
	ADMUX=0xc1; //adc ref 내부 2.56v로 사용,오른쪽정렬(0), adc채널 1번사용 싱글엔드
 3c0:	91 ec       	ldi	r25, 0xC1	; 193
 3c2:	97 b9       	out	0x07, r25	; 7
	
	sei();            // SREG.I 세트 모든 인터럽트 허용
 3c4:	78 94       	sei
	
	PORTC=~0x00;	  // C포트 초기화
 3c6:	85 bb       	out	0x15, r24	; 21
	PORTA=~0x00;	  // A포트 초기화
 3c8:	8b bb       	out	0x1b, r24	; 27
	serial_init(9600);
 3ca:	60 e8       	ldi	r22, 0x80	; 128
 3cc:	75 e2       	ldi	r23, 0x25	; 37
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	82 de       	rcall	.-764    	; 0xd8 <serial_init>
	while (1)
	{
		
		if(flag==1)LED();
 3d4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag>
 3d8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <flag+0x1>
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	11 f4       	brne	.+4      	; 0x3e4 <main+0x3c>
 3e0:	e3 de       	rcall	.-570    	; 0x1a8 <LED>
 3e2:	f8 cf       	rjmp	.-16     	; 0x3d4 <main+0x2c>
		else if(flag==2)FND_SEGMENT();
 3e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag>
 3e8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <flag+0x1>
 3ec:	02 97       	sbiw	r24, 0x02	; 2
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <main+0x4c>
 3f0:	36 df       	rcall	.-404    	; 0x25e <FND_SEGMENT>
 3f2:	f0 cf       	rjmp	.-32     	; 0x3d4 <main+0x2c>
		else if(flag==3)serial();
 3f4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <flag>
 3f8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <flag+0x1>
 3fc:	03 97       	sbiw	r24, 0x03	; 3
 3fe:	51 f7       	brne	.-44     	; 0x3d4 <main+0x2c>
 400:	a7 df       	rcall	.-178    	; 0x350 <serial>
 402:	e8 cf       	rjmp	.-48     	; 0x3d4 <main+0x2c>

00000404 <__divmodhi4>:
 404:	97 fb       	bst	r25, 7
 406:	07 2e       	mov	r0, r23
 408:	16 f4       	brtc	.+4      	; 0x40e <__divmodhi4+0xa>
 40a:	00 94       	com	r0
 40c:	06 d0       	rcall	.+12     	; 0x41a <__divmodhi4_neg1>
 40e:	77 fd       	sbrc	r23, 7
 410:	08 d0       	rcall	.+16     	; 0x422 <__divmodhi4_neg2>
 412:	45 d0       	rcall	.+138    	; 0x49e <__udivmodhi4>
 414:	07 fc       	sbrc	r0, 7
 416:	05 d0       	rcall	.+10     	; 0x422 <__divmodhi4_neg2>
 418:	3e f4       	brtc	.+14     	; 0x428 <__divmodhi4_exit>

0000041a <__divmodhi4_neg1>:
 41a:	90 95       	com	r25
 41c:	81 95       	neg	r24
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <__divmodhi4_neg2>:
 422:	70 95       	com	r23
 424:	61 95       	neg	r22
 426:	7f 4f       	sbci	r23, 0xFF	; 255

00000428 <__divmodhi4_exit>:
 428:	08 95       	ret

0000042a <__udivmodsi4>:
 42a:	a1 e2       	ldi	r26, 0x21	; 33
 42c:	1a 2e       	mov	r1, r26
 42e:	aa 1b       	sub	r26, r26
 430:	bb 1b       	sub	r27, r27
 432:	fd 01       	movw	r30, r26
 434:	0d c0       	rjmp	.+26     	; 0x450 <__udivmodsi4_ep>

00000436 <__udivmodsi4_loop>:
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	ee 1f       	adc	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	a2 17       	cp	r26, r18
 440:	b3 07       	cpc	r27, r19
 442:	e4 07       	cpc	r30, r20
 444:	f5 07       	cpc	r31, r21
 446:	20 f0       	brcs	.+8      	; 0x450 <__udivmodsi4_ep>
 448:	a2 1b       	sub	r26, r18
 44a:	b3 0b       	sbc	r27, r19
 44c:	e4 0b       	sbc	r30, r20
 44e:	f5 0b       	sbc	r31, r21

00000450 <__udivmodsi4_ep>:
 450:	66 1f       	adc	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	1a 94       	dec	r1
 45a:	69 f7       	brne	.-38     	; 0x436 <__udivmodsi4_loop>
 45c:	60 95       	com	r22
 45e:	70 95       	com	r23
 460:	80 95       	com	r24
 462:	90 95       	com	r25
 464:	9b 01       	movw	r18, r22
 466:	ac 01       	movw	r20, r24
 468:	bd 01       	movw	r22, r26
 46a:	cf 01       	movw	r24, r30
 46c:	08 95       	ret

0000046e <__tablejump2__>:
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	00 24       	eor	r0, r0
 474:	00 1c       	adc	r0, r0
 476:	0b be       	out	0x3b, r0	; 59
 478:	07 90       	elpm	r0, Z+
 47a:	f6 91       	elpm	r31, Z
 47c:	e0 2d       	mov	r30, r0
 47e:	09 94       	ijmp

00000480 <__umulhisi3>:
 480:	a2 9f       	mul	r26, r18
 482:	b0 01       	movw	r22, r0
 484:	b3 9f       	mul	r27, r19
 486:	c0 01       	movw	r24, r0
 488:	a3 9f       	mul	r26, r19
 48a:	70 0d       	add	r23, r0
 48c:	81 1d       	adc	r24, r1
 48e:	11 24       	eor	r1, r1
 490:	91 1d       	adc	r25, r1
 492:	b2 9f       	mul	r27, r18
 494:	70 0d       	add	r23, r0
 496:	81 1d       	adc	r24, r1
 498:	11 24       	eor	r1, r1
 49a:	91 1d       	adc	r25, r1
 49c:	08 95       	ret

0000049e <__udivmodhi4>:
 49e:	aa 1b       	sub	r26, r26
 4a0:	bb 1b       	sub	r27, r27
 4a2:	51 e1       	ldi	r21, 0x11	; 17
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__udivmodhi4_ep>

000004a6 <__udivmodhi4_loop>:
 4a6:	aa 1f       	adc	r26, r26
 4a8:	bb 1f       	adc	r27, r27
 4aa:	a6 17       	cp	r26, r22
 4ac:	b7 07       	cpc	r27, r23
 4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__udivmodhi4_ep>
 4b0:	a6 1b       	sub	r26, r22
 4b2:	b7 0b       	sbc	r27, r23

000004b4 <__udivmodhi4_ep>:
 4b4:	88 1f       	adc	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	5a 95       	dec	r21
 4ba:	a9 f7       	brne	.-22     	; 0x4a6 <__udivmodhi4_loop>
 4bc:	80 95       	com	r24
 4be:	90 95       	com	r25
 4c0:	bc 01       	movw	r22, r24
 4c2:	cd 01       	movw	r24, r26
 4c4:	08 95       	ret

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
